library(rgdal)
if (!require(geojsonio)) {
install.packages("geojsonio")
library(geojsonio)
}
library(maps)
library(ggmap)
library(maptools)
yes
library(rgdal)
if (!require(geojsonio)) {
install.packages("geojsonio")
library(geojsonio)
}
library(maps)
library(ggmap)
library(maptools)
# R-code for computing the function v(x) v <- numeric(4)
for (x in 2:5) {
k <- 0:x
v[x-1] <- (790-590)*(x - sum((x-k)*dpois(k,la))) - 50*x }
# R-code for computing the function g(x) library(expm)
M <- Reduce(‘+‘, lapply(0:9, function(s) P%^%s)) g <- M%*%v
# R-code for computing the function v(x) v <- numeric(4)
for (x in 2:5) {
k <- 0:x
v[x-1] <- (790-590)*(x - sum((x-k)*dpois(k,3))) - 50*x }
# R-code for computing the function v(x) v <- numeric(4)
for (x in 2:5) {
k <- 0:x
v[x-1] <- (790-590)*(x - sum((x-k)*dpois(k,3))) - 50*x }
# R-code for computing the function g(x) library(expm)
M <- Reduce(‘+‘, lapply(0:9, function(s) P%^%s)) g <- M%*%v
# R-code for computing the function v(x) v <- numeric(4)
for (x in 2:5) {
k <- 0:x
v[x-1] = (790-590)*(x - sum((x-k)*dpois(k,la))) - 50*x }
# R-code for computing the function g(x) library(expm)
M <- Reduce(‘+‘, lapply(0:9, function(s) P%^%s)) g <- M%*%v
# R-code for computing the function v(x) v <- numeric(4)
for (x in 2:5) {
k <- 0:x
v[x-1] = (790-590)*(x - sum((x-k)*dpois(k,3))) - 50*x }
# R-code for computing the function g(x) library(expm)
M <- Reduce(‘+‘, lapply(0:9, function(s) P%^%s)) g <- M%*%v
# R-code for computing the function v(x) v <- numeric(4)
for (x in 2:5) {
k <- 0:x
v[x-1] <- (790-590)*(x - sum((x-k)*dpois(k,la))) - 50*x }
# R-code for computing the function g(x) library(expm)
M <- Reduce(‘+‘, lapply(0:9, function(s) P%^%s)) g <- M%*%v
# R-code for computing the function v(x) v <- numeric(4)
la = 3
for (x in 2:5) {
k <- 0:x
v[x-1] <- (790-590)*(x - sum((x-k)*dpois(k,la))) - 50*x }
# R-code for computing the function g(x) library(expm)
M <- Reduce(‘+‘, lapply(0:9, function(s) P%^%s)) g <- M%*%v
library(ggplot2)
library(dplyr)
availablePackages <- available.packages()[,1]
install.packages(availablePackages)
?rivers
#d
hist(rivers)
# One approach is to see the frequency of the river characterized by its length using the histogram
# Most of the river has their lengths in the range 0-500 miles (approx 85 rivers), 40 rivers have their length betw 500-1000, approx. 10 rivers have their length in range 1000-1500 miles, rivers that have length in range 1500-2000 and 2000-2500 miles are the same with approx. 7 rivers, rivers that have length in range 2500-3000 miles and 3500-4000 miles are the same (approx. 4 rivers.) Interestingly, there is no river that have length in range 3000-3500 miles
# c.
rivers_class <- cut(rivers, breaks = c(min(rivers), 250, 500, 750, 1000, 1250, max(rivers)), include.lowest = TRUE)
# Use the barplot to visualize the frequency of the length of the river
# d.
barplot(table(rivers_class))
# d.
bar_plot = barplot(table(rivers_class))
# See the summary
summary(bar_plot)
summary(rivers_class)
Inference: there are 14 rivers having length from 135-250, 70 rivers having length from 250-500, etc
?islands
rivers
hist(rivers)
hists(islands)
hist(islands)
islands_class <- cut(islands, breaks = c(min(islands), 200, 400, 600, 800, 1000,max(rivers)), include.lowest = TRUE)
# d.
bar_plot = barplot(table(rivers_class))
# d.
bar_plot = barplot(table(islands_class))
min(islands)
max(islands)
?islands
summary(bar_plot)
summary(islands_class)
islands
bar_plot
# d.
bar_plot = barplot(table(islands_class))
?islands
# b.
# There are 37 places / continents that have the areas between 12 and 200 in thousands of square miles
# There are 3 places/ continents... etc
sd(islands)
mean(islands)
# The dataset standard deviation is 3371.146 and it has high sd (compared to the mean) => values are spread over the wide range
boxplot(islands)
all.subsets <- function(set) {
n <- length(set)
bin <- expand.grid(rlply(n, c(F, T)))
mlply(bin, function(...) { set[c(...)] })
}
AICs
# The empty model is done separately
swiss_empty <- lm(Fertility ~ 1, data = swiss)
AICs[1] <- AIC(swiss_empty)
BICs[1] <- BIC(swiss_empty)
AR2s[1] <- summary(swiss_empty)$adj.r.squared
# Make objects for AIC, BIC and adjusted R-squared values
AICs <- numeric(32)
BICs <- numeric(32)
AR2s <- numeric(32)
# Go through all non-empty models
for(i in 2:32){
swiss_i <- lm(as.formula(paste0("Fertility ~ ", list_models[[i]])), data = swiss)
AICs[i] <- AIC(swiss_i)
BICs[i] <- BIC(swiss_i)
AR2s[i] <- summary(swiss_i)$adj.r.squared
}
?swiss
AICs
BICs
AR2s
# The empty model is done separately
swiss_empty <- lm(Fertility ~ 1, data = swiss)
AICs[1] <- AIC(swiss_empty)
BICs[1] <- BIC(swiss_empty)
AR2s[1] <- summary(swiss_empty)$adj.r.squared
# Go through all non-empty models
for(i in 2:32){
swiss_i <- lm(as.formula(paste0("Fertility ~ ", list_models[[i]])), data = swiss)
AICs[i] <- AIC(swiss_i)
BICs[i] <- BIC(swiss_i)
AR2s[i] <- summary(swiss_i)$adj.r.squared
}
?swiss
AICs
BICs
AR2s
list_models <- lapply(all.subsets(c("Agriculture", "Education", "Examination", "Catholic", "Infant.Mortality")), function(char) paste(char, collapse = " + "))
# Create all possible models
#install.packages('plyr')
library(plyr)
list_models <- lapply(all.subsets(c("Agriculture", "Education", "Examination", "Catholic", "Infant.Mortality")), function(char) paste(char, collapse = " + "))
# The empty model is done separately
swiss_empty <- lm(Fertility ~ 1, data = swiss)
AICs[1] <- AIC(swiss_empty)
BICs[1] <- BIC(swiss_empty)
AR2s[1] <- summary(swiss_empty)$adj.r.squared
# Go through all non-empty models
for(i in 2:32){
swiss_i <- lm(as.formula(paste0("Fertility ~ ", list_models[[i]])), data = swiss)
AICs[i] <- AIC(swiss_i)
BICs[i] <- BIC(swiss_i)
AR2s[i] <- summary(swiss_i)$adj.r.squared
}
list_models
# Make objects for AIC, BIC and adjusted R-squared values
AICs <- numeric(65535)
BICs <- numeric(65535)
AR2s <- numeric(65535)
# The empty model is done separately
football_empty <- lm(FTG ~ 1, data = football_df_lm)
summary(football_empty)
# Read the data
df <- read.csv('football_data_with_matches.csv', header=TRUE, row.names='Matches')
# The empty model is done separately
football_empty <- lm(FTG ~ 1, data = football_df_lm)
# The dataset used for Linear Regression. Note that for the model to work, we hence drop the FTHG and FTAG columns
football_df_lm <- df[-c(1,2)]
# The empty model is done separately
football_empty <- lm(FTG ~ 1, data = football_df_lm)
summary(football_empty)
AICs[1] <- AIC(football_empty)
BICs[1] <- BIC(football_empty)
AR2s[1] <- summary(football_empty)$adj.r.squared
# Go through all non-empty models
for(i in 2:32){
swiss_i <- lm(as.formula(paste0("FTG ~ ", list_models[[i]])), data = df)
AICs[i] <- AIC(swiss_i)
BICs[i] <- BIC(swiss_i)
AR2s[i] <- summary(swiss_i)$adj.r.squared
}
# Go through all non-empty models
for(i in 2:65535){
swiss_i <- lm(as.formula(paste0("FTG ~ ", list_models[[i]])), data = df)
AICs[i] <- AIC(swiss_i)
BICs[i] <- BIC(swiss_i)
AR2s[i] <- summary(swiss_i)$adj.r.squared
}
w
View(football_df_lm)
swiss_i <- lm(as.formula(paste0("FTG ~ ", list_models[[i]])), data = football_df_lm)
all.subsets <- function(set) {
n <- length(set)
bin <- expand.grid(rlply(n, c(F, T)))
mlply(bin, function(...) { set[c(...)] })
}
list_models <- lapply(all.subsets(c('HTHG', 'HTAG', 'HTR', 'HS',
'AS', 'HST', 'AST', 'HF', 'AF', 'HC', 'AC', 'HY', 'AY', 'HR', 'AR',
'FTR')), function(char) paste(char, collapse = " + "))
list_models <- lapply(all.subsets(c('HTHG', 'HTAG', 'HTR', 'HS',
'AS', 'HST', 'AST', 'HF', 'AF', 'HC', 'AC', 'HY', 'AY', 'HR', 'AR',
'FTR')), function(char) paste(char, collapse = " + "))
# Go through all non-empty models
for(i in 2:65535){
swiss_i <- lm(as.formula(paste0("FTG ~ ", list_models[[i]])), data = football_df_lm)
AICs[i] <- AIC(swiss_i)
BICs[i] <- BIC(swiss_i)
AR2s[i] <- summary(swiss_i)$adj.r.squared
}
AICs
# The dataset used for Linear Regression.
View(df)
# The dataset used for Linear Regression.
football_df_lm <- read.csv('football_data_regression', row.names='Matches', sep=',')
# The dataset used for Linear Regression.
football_df_lm <- read.csv('football_data_regression.csv', row.names='Matches', sep=',')
# The dataset used for Linear Regression.
football_df_lm <- read.csv('football_data_regression.csv', row.names='Matches', sep=',')
View(football_df_lm)
getwd()
setwd("~/Google Drive/GOOGLE DRIVE/Aalto/Aalto/Aalto Spring 2020 (2nd year)/MS-E2112 Multivariate Statistical Analysis/Project")
# The dataset used for Linear Regression.
football_df_lm <- read.csv('football_data_regression.csv', row.names='Matches', sep=',')
